{"name":"Easy-exist","tagline":"An easy to use gem to interact with eXist-db via its REST API","body":"## Install\r\n```ruby\r\ngem install easy-exist\r\n```\r\n\r\n## Examples\r\n\r\n### TL:DR\r\n\r\n```ruby\r\nrequire 'easy-exist'\r\n\r\n# connect\r\ndb = EasyExist::DB.new(\"http://localhost:8080\", { \r\n\tusername: \"user\", password: \"easy\"\r\n})\r\n\r\n# add a document\r\nbody =  \"<message><body>Hello World</body></message>\"\r\ndb.put(\"/my-collection/my-document\", body)\r\n\r\n# get document body\r\ndoc = db.get(\"/my-collection/my-document\")\r\n\r\n# query for all message bodies\r\nbodies = db.query(\"collection('my-collection')/message/body\");\r\n\r\n# delete the document\r\ndb.delete(\"/my-collection/my-document\")\r\n```\r\n\r\n### More Examples\r\n\r\n#### Creating a DB\r\nThe only required parameter for initializing a new DB is the URL for eXist-db. \r\n\r\n- If no collection is specified, GET, PUT and DELETE requests are relative to `/db/` otherwise they are relative to the given collection.\r\n- You can specify credentials that will be transmitted with all requests. If no user credentials are specified, eXist-db treats requests as being under the guest account. Unless you configure otherwise, the default behaviour is to allow guest to read but not write or delete. \r\n\r\n##### URL Only\r\n```ruby\r\ndb = EasyExist::DB.new(\"http://localhost:8080\")\r\n```\r\n\r\n##### Specify Collection\r\n```ruby\r\ndb = EasyExist::DB.new(\"http://localhost:8080\", { \r\n\t\tcollection: \"my-collection\"\r\n})\r\n```\r\n\r\n##### Specify user credentials\r\n```ruby\r\ndb = EasyExist::DB.new(\"http://localhost:8080\", { \r\n\t\tusername: \"user\", \r\n\t\tpassword: \"areallystrongpassword\" \r\n})\r\n```\r\n\r\n#### Get\r\nRetrieves the body of document at the given URI. \r\n```ruby\r\nbody = db.get(\"/my-document.xml\")\r\n```\r\n\r\n#### Put\r\nPuts the body at the given URI.\r\n```ruby\r\nbody = <<-END;\r\n\t<xml>\r\n\t\t<message>\r\n\t\t\t<body>Hello World</body>\r\n\t\t\t<sender>Alice</sender>\r\n\t\t\t<receiver>Bob</receiver>\r\n\t\t\t<date>2015-02-12</date>\r\n\t\t</message>\r\n\t</xml>\r\n\tEND\r\n\r\ndb.put(\"/messages/12345\", body)\r\n```\r\n\r\n#### Delete\r\nDeletes the document at the given URI\r\n```ruby\r\ndb.delete(\"/messages/12345\")\r\n```\r\n\r\n#### Exists?\r\nReturns true if the document exists, false otherwise.\r\nFalse will also be retured if the request fails. For example, if the user is unauthorized.\r\n\r\n```ruby\r\ndb.put(\"/messages/12345\", body) unless db.exists?(\"/messages/12345\")\r\n\r\ndb.delete(\"/messages/12345\") if db.exists?(\"/messages/12345\")\r\n```\r\n\r\n#### QUERY\r\nRuns the given query against the document store.\r\n```ruby\r\nquery = <<-END;\r\n\tfor $message in collection('messages')//message\r\n\t\torder by $message/date\r\n\t\treturn $message\r\n\tEND\r\n\r\ndb.query(query)\r\n```\r\n\r\n##### Paging\r\nYou can specify the start index and max index when performing a query:\r\n```ruby\r\ndb.query(query, { start: 2, max: 10 })\r\n```\r\n\r\n#### Stored XQuery\r\n\r\n```ruby\r\nquery = <<-END;\r\n        let $var := 1\r\n        return <var>{$var}</var>\r\n\tEND\r\n\r\ndb.store_query(\"/stored-queries/var.xq\", query)\r\n\r\ndb.execute_stored_query(\"/stored-queries/var.xq\")\r\n# <var>1</var>\r\n```\r\n\r\n### Handling Exceptions\r\nIf a HTTP request fails, the exception is raised to the client. \r\n\r\nExamples include:\r\n\r\n- User is not authenticated (401)\r\n- User does not have permission (403)\r\n- Document does not exist (404)\r\n\r\nFor more information see [HTTParty::Response][httparty-response] and [Net::HTTPServerException][net-http-server-exception]\r\n\r\n```ruby\r\nbegin\r\n\tdb.get(\"/non-existant-document.xml\")\r\nrescue Net::HTTPServerException => e\r\n\tcase e.response\r\n\twhen Net::HTTPNotFound        then puts \"Oops, not Found!\"\r\n\twhen Net::HTTPUnauthorized    then puts \"Unauthorized!\"\r\n\t#...\r\n\tend\r\nend\r\n```\r\n\r\n## Help & Docs\r\n\r\n- [Easy-Exist Docs][easy-exist-docs]\r\n- [eXist-db REST API reference][exist-rest-api]\r\n- [HTTParty::Response][httparty-response]\r\n- [Net::HTTPServerException][net-http-server-exception]\r\n\r\n## Contributing\r\n- Fork the project.\r\n- Make your feature addition or bug fix, including tests.\r\n- Commit.\r\n- Create a pull request.\r\n\r\n[httparty-response]:\t\t\thttp://www.rubydoc.info/github/jnunemaker/httparty/HTTParty/Response\r\n[net-http-server-exception]:\thttp://ruby-doc.org/stdlib-1.9.3/libdoc/net/http/rdoc/Net/HTTPServerException.html\r\n[easy-exist-docs]:\t\t\t\thttp://casst01.github.io/easy-exist/docs\r\n[exist-rest-api]:\t\t\t\thttp://exist-db.org/exist/apps/doc/devguide_rest.xml","google":"UA-60676563-1","note":"Don't delete this file! It's used internally to help with page regeneration."}